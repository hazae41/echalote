{"version":3,"file":"cert.cjs","sources":["../../../../../../../src/mods/tor/binary/certs/ed25519/cert.ts"],"sourcesContent":["import { Binary } from \"libs/binary.js\";\nimport { Cert as ICert } from \"mods/tor/binary/certs/cert.js\";\nimport { SignedWithEd25519Key } from \"mods/tor/binary/certs/ed25519/extensions/signer.js\";\n\nexport interface Extensions {\n  signer?: SignedWithEd25519Key\n}\n\nexport class Cert implements ICert {\n  readonly class = Cert\n\n  static types = {\n    EID_TO_SIGNING: 4,\n    SIGNING_TO_TLS: 5,\n    SIGNING_TO_AUTH: 6,\n  }\n\n  static flags = {\n    AFFECTS_VALIDATION: 1\n  }\n\n  constructor(\n    readonly type: number,\n    readonly version: number,\n    readonly certType: number,\n    readonly expiration: Date,\n    readonly certKeyType: number,\n    readonly certKey: Buffer,\n    readonly extensions: Extensions,\n    readonly payload: Buffer,\n    readonly signature: Buffer\n  ) { }\n\n  write(binary: Binary) {\n    throw new Error(`Unimplemented`)\n  }\n\n  check() {\n    const now = new Date()\n\n    if (now > this.expiration)\n      throw new Error(`Late certificate`)\n    if (this.extensions.signer)\n      this.extensions.signer.check(this)\n  }\n\n  static read(binary: Binary, type: number, length: number) {\n    const start = binary.offset\n\n    const version = binary.readUint8()\n    const certType = binary.readUint8()\n\n    const expDateHours = binary.readUint32()\n    const expiration = new Date(expDateHours * 60 * 60 * 1000)\n\n    const certKeyType = binary.readUint8()\n    const certKey = binary.read(32)\n\n    const nextensions = binary.readUint8()\n    const extensions: Extensions = {}\n\n    for (let i = 0; i < nextensions; i++) {\n      const length = binary.readUint16()\n      const type = binary.readUint8()\n      const flags = binary.readUint8()\n\n      if (type === SignedWithEd25519Key.type) {\n        extensions.signer = SignedWithEd25519Key.read(binary, length, flags)\n        continue\n      }\n\n      if (flags === this.flags.AFFECTS_VALIDATION)\n        throw new Error(`Unknown Ed25519 cert extension type ${type}`)\n      else\n        binary.read(length)\n    }\n\n    const payload = binary.reread(start)\n    const signature = binary.read(64)\n\n    if (binary.offset - start !== length)\n      throw new Error(`Invalid Ed25519 cert length ${length}`)\n    return new this(type, version, certType, expiration, certKeyType, certKey, extensions, payload, signature)\n  }\n\n}"],"names":["SignedWithEd25519Key"],"mappings":"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"}