{"version":3,"file":"cell.cjs","sources":["../../../../../../src/mods/tor/binary/cells/cell.ts"],"sourcesContent":["import { Binary } from \"libs/binary.js\";\nimport { Circuit } from \"mods/tor/circuit.js\";\nimport { PAYLOAD_LEN } from \"mods/tor/constants.js\";\nimport { Tor } from \"mods/tor/tor.js\";\n\nexport type Cell =\n  | OldCell\n  | NewCell\n\nexport interface OldCellRaw {\n  type: \"old\",\n  circuitId: number,\n  command: number,\n  payload: Buffer\n}\n\nexport interface NewCellRaw {\n  type: \"new\",\n  circuitId: number,\n  command: number,\n  payload: Buffer\n}\n\nexport class OldCell {\n  readonly class = OldCell\n\n  constructor(\n    readonly circuit: Circuit | undefined,\n    readonly command: number,\n    readonly payload: Buffer\n  ) { }\n\n  pack() {\n    const binary = Binary.allocUnsafe(2 + 1 + 2 + this.payload.length)\n\n    binary.writeUint16(this.circuit?.id ?? 0)\n    binary.writeUint8(this.command)\n    binary.writeUint16(this.payload.length)\n    binary.write(this.payload)\n\n    return binary.buffer\n  }\n\n  static tryRead(binary: Binary): OldCellRaw | undefined {\n    const start = binary.offset\n\n    try {\n      const circuitId = binary.readUint16()\n      const command = binary.readUint8()\n\n      const length = command === 7\n        ? binary.readUint16()\n        : PAYLOAD_LEN\n      const payload = binary.read(length)\n\n      return { type: \"old\", circuitId, command, payload }\n    } catch (e: unknown) {\n      binary.offset = start\n    }\n  }\n\n  static unpack(tor: Tor, raw: OldCellRaw) {\n    const { circuitId, command, payload } = raw\n\n    const circuit = circuitId\n      ? tor.circuits.get(circuitId)\n      : undefined\n\n    if (circuitId && !circuit)\n      throw new Error(`Unknown circuit id ${circuitId}`)\n    return new this(circuit, command, payload)\n  }\n}\n\nexport class NewCell {\n  readonly class = NewCell\n\n  constructor(\n    readonly circuit: Circuit | undefined,\n    readonly command: number,\n    readonly payload: Buffer\n  ) { }\n\n  pack() {\n    if (this.command >= 128) {\n      const binary = Binary.allocUnsafe(4 + 1 + 2 + this.payload.length)\n\n      binary.writeUint32(this.circuit?.id ?? 0)\n      binary.writeUint8(this.command)\n      binary.writeUint16(this.payload.length)\n      binary.write(this.payload)\n\n      return binary.buffer\n    } else {\n      const binary = Binary.allocUnsafe(4 + 1 + this.payload.length)\n\n      binary.writeUint32(this.circuit?.id ?? 0)\n      binary.writeUint8(this.command)\n      binary.write(this.payload)\n\n      return binary.buffer\n    }\n  }\n\n  static tryRead(binary: Binary): NewCellRaw | undefined {\n    const start = binary.offset\n\n    try {\n      const circuitId = binary.readUint32()\n      const command = binary.readUint8()\n\n      const length = command >= 128\n        ? binary.readUint16()\n        : PAYLOAD_LEN\n\n      const payload = binary.read(length)\n\n      return { type: \"new\", circuitId, command, payload }\n    } catch (e: unknown) {\n      binary.offset = start\n    }\n  }\n\n  static unpack(tor: Tor, raw: NewCellRaw) {\n    const { circuitId, command, payload } = raw\n\n    const circuit = circuitId\n      ? tor.circuits.get(circuitId)\n      : undefined\n\n    if (circuitId && !circuit)\n      throw new Error(`Unknown circuit id ${circuitId}`)\n    return new this(circuit, command, payload)\n  }\n}"],"names":["binary","Binary","PAYLOAD_LEN"],"mappings":"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"}