{"version":3,"file":"relay_connected.cjs","sources":["../../../../../../../src/mods/tor/binary/cells/relayed/relay_connected.ts"],"sourcesContent":["import { Binary } from \"libs/binary.js\"\nimport { ttlToDate } from \"libs/time.js\"\nimport { Address4, Address6 } from \"mods/tor/binary/address.js\"\nimport { RelayCell } from \"mods/tor/binary/cells/direct/relay/cell.js\"\nimport { InvalidRelayCommand, InvalidStream } from \"mods/tor/binary/cells/errors.js\"\nimport { Circuit } from \"mods/tor/circuit.js\"\nimport { TcpStream } from \"mods/tor/streams/tcp.js\"\n\nexport class RelayConnectedCell {\n  readonly class = RelayConnectedCell\n\n  static rcommand = 4\n\n  constructor(\n    readonly circuit: Circuit,\n    readonly stream: TcpStream,\n    readonly address: Address4 | Address6,\n    readonly ttl: Date\n  ) { }\n\n  async pack() {\n    return await this.cell().pack()\n  }\n\n  cell(): RelayCell {\n    throw new Error(`Unimplemented`)\n  }\n\n  static uncell(cell: RelayCell) {\n    if (cell.rcommand !== this.rcommand)\n      throw new InvalidRelayCommand(this.name, cell.rcommand)\n    if (!cell.stream)\n      throw new InvalidStream(this.name, cell.stream)\n\n    const binary = new Binary(cell.data)\n\n    const ipv4 = Address4.read(binary)\n\n    if (ipv4.address !== \"...\") {\n      const ttl = ttlToDate(binary.readUint32())\n      return new this(cell.circuit, cell.stream, ipv4, ttl)\n    }\n\n    const type = binary.readUint8()\n\n    if (type !== 6)\n      throw new Error(`Unknown address type ${type}`)\n\n    const ipv6 = Address6.read(binary)\n    const ttl = ttlToDate(binary.readUint32())\n    return new this(cell.circuit, cell.stream, ipv6, ttl)\n  }\n}"],"names":["InvalidRelayCommand","InvalidStream","binary","Binary","Address4","ttlToDate","Address6"],"mappings":";;;;;;;;MAQa,kBAAkB,CAAA;AAK7B,IAAA,WAAA,CACW,OAAgB,EAChB,MAAiB,EACjB,OAA4B,EAC5B,GAAS,EAAA;QAHT,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QAChB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAW;QACjB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAqB;QAC5B,IAAG,CAAA,GAAA,GAAH,GAAG,CAAM;QARX,IAAK,CAAA,KAAA,GAAG,kBAAkB,CAAA;KAS9B;IAEC,IAAI,GAAA;;YACR,OAAO,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAA;SAChC,CAAA,CAAA;AAAA,KAAA;IAED,IAAI,GAAA;AACF,QAAA,MAAM,IAAI,KAAK,CAAC,CAAA,aAAA,CAAe,CAAC,CAAA;KACjC;IAED,OAAO,MAAM,CAAC,IAAe,EAAA;AAC3B,QAAA,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ;YACjC,MAAM,IAAIA,0BAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;QACzD,IAAI,CAAC,IAAI,CAAC,MAAM;YACd,MAAM,IAAIC,oBAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAEjD,MAAMC,QAAM,GAAG,IAAIC,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAEpC,MAAM,IAAI,GAAGC,gBAAQ,CAAC,IAAI,CAACF,QAAM,CAAC,CAAA;AAElC,QAAA,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,EAAE;YAC1B,MAAM,GAAG,GAAGG,cAAS,CAACH,QAAM,CAAC,UAAU,EAAE,CAAC,CAAA;AAC1C,YAAA,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC,CAAA;AACtD,SAAA;AAED,QAAA,MAAM,IAAI,GAAGA,QAAM,CAAC,SAAS,EAAE,CAAA;QAE/B,IAAI,IAAI,KAAK,CAAC;AACZ,YAAA,MAAM,IAAI,KAAK,CAAC,wBAAwB,IAAI,CAAA,CAAE,CAAC,CAAA;QAEjD,MAAM,IAAI,GAAGI,gBAAQ,CAAC,IAAI,CAACJ,QAAM,CAAC,CAAA;QAClC,MAAM,GAAG,GAAGG,cAAS,CAACH,QAAM,CAAC,UAAU,EAAE,CAAC,CAAA;AAC1C,QAAA,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC,CAAA;KACtD;;AAxCM,kBAAQ,CAAA,QAAA,GAAG,CAAC;;;;"}