{"version":3,"file":"cell.cjs","sources":["../../../../../../../../src/mods/tor/binary/cells/relayed/relay_end/cell.ts"],"sourcesContent":["import { Binary } from \"libs/binary.js\";\nimport { RelayCell } from \"mods/tor/binary/cells/direct/relay/cell.js\";\nimport { InvalidRelayCommand, InvalidStream } from \"mods/tor/binary/cells/errors.js\";\nimport { RelayEndReason, RelayEndReasonExitPolicy, RelayEndReasonOther } from \"mods/tor/binary/cells/relayed/relay_end/reason.js\";\nimport { Circuit } from \"mods/tor/circuit.js\";\nimport { PAYLOAD_LEN } from \"mods/tor/constants.js\";\nimport { TcpStream } from \"mods/tor/streams/tcp.js\";\n\nexport class RelayEndCell {\n  readonly class = RelayEndCell\n\n  static rcommand = 3\n\n  static reasons = {\n    REASON_UNKNOWN: 0,\n    REASON_MISC: 1,\n    REASON_RESOLVEFAILED: 2,\n    REASON_CONNECTREFUSED: 3,\n    REASON_EXITPOLICY: 4,\n    REASON_DESTROY: 5,\n    REASON_DONE: 6,\n    REASON_TIMEOUT: 7,\n    REASON_NOROUTE: 8,\n    REASON_HIBERNATING: 9,\n    REASON_INTERNAL: 10,\n    REASON_RESOURCELIMIT: 11,\n    REASON_CONNRESET: 12,\n    REASON_TORPROTOCOL: 13,\n    REASON_NOTDIRECTORY: 14,\n  } as const\n\n  constructor(\n    readonly circuit: Circuit,\n    readonly stream: TcpStream,\n    readonly reason: RelayEndReason\n  ) { }\n\n  async pack() {\n    return await this.cell().pack()\n  }\n\n  cell() {\n    const binary = Binary.allocUnsafe(PAYLOAD_LEN)\n\n    binary.writeUint8(this.reason.id)\n    this.reason.write(binary)\n\n    return new RelayCell(this.circuit, this.stream, this.class.rcommand, binary.sliced)\n  }\n\n  static uncell(cell: RelayCell) {\n    if (cell.rcommand !== this.rcommand)\n      throw new InvalidRelayCommand(this.name, cell.rcommand)\n    if (!cell.stream)\n      throw new InvalidStream(this.name, cell.stream)\n\n    const binary = new Binary(cell.data)\n\n    const reasonId = binary.readUint8()\n\n    const reason = reasonId === this.reasons.REASON_EXITPOLICY\n      ? RelayEndReasonExitPolicy.read(binary)\n      : new RelayEndReasonOther(reasonId)\n\n    return new this(cell.circuit, cell.stream, reason)\n  }\n}"],"names":["binary","Binary","PAYLOAD_LEN","RelayCell","InvalidRelayCommand","InvalidStream","reason","RelayEndReasonExitPolicy","RelayEndReasonOther"],"mappings":";;;;;;;;;MAQa,YAAY,CAAA;AAuBvB,IAAA,WAAA,CACW,OAAgB,EAChB,MAAiB,EACjB,MAAsB,EAAA;QAFtB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QAChB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAW;QACjB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAgB;QAzBxB,IAAK,CAAA,KAAA,GAAG,YAAY,CAAA;KA0BxB;IAEC,IAAI,GAAA;;YACR,OAAO,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAA;SAChC,CAAA,CAAA;AAAA,KAAA;IAED,IAAI,GAAA;QACF,MAAMA,QAAM,GAAGC,aAAM,CAAC,WAAW,CAACC,qBAAW,CAAC,CAAA;QAE9CF,QAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;AACjC,QAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAACA,QAAM,CAAC,CAAA;QAEzB,OAAO,IAAIG,cAAS,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAEH,QAAM,CAAC,MAAM,CAAC,CAAA;KACpF;IAED,OAAO,MAAM,CAAC,IAAe,EAAA;AAC3B,QAAA,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ;YACjC,MAAM,IAAII,0BAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;QACzD,IAAI,CAAC,IAAI,CAAC,MAAM;YACd,MAAM,IAAIC,oBAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAEjD,MAAML,QAAM,GAAG,IAAIC,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AAEpC,QAAA,MAAM,QAAQ,GAAGD,QAAM,CAAC,SAAS,EAAE,CAAA;QAEnC,MAAMM,QAAM,GAAG,QAAQ,KAAK,IAAI,CAAC,OAAO,CAAC,iBAAiB;AACxD,cAAEC,+BAAwB,CAAC,IAAI,CAACP,QAAM,CAAC;AACvC,cAAE,IAAIQ,0BAAmB,CAAC,QAAQ,CAAC,CAAA;AAErC,QAAA,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAEF,QAAM,CAAC,CAAA;KACnD;;AAtDM,YAAQ,CAAA,QAAA,GAAG,CAAC,CAAA;AAEZ,YAAA,CAAA,OAAO,GAAG;AACf,IAAA,cAAc,EAAE,CAAC;AACjB,IAAA,WAAW,EAAE,CAAC;AACd,IAAA,oBAAoB,EAAE,CAAC;AACvB,IAAA,qBAAqB,EAAE,CAAC;AACxB,IAAA,iBAAiB,EAAE,CAAC;AACpB,IAAA,cAAc,EAAE,CAAC;AACjB,IAAA,WAAW,EAAE,CAAC;AACd,IAAA,cAAc,EAAE,CAAC;AACjB,IAAA,cAAc,EAAE,CAAC;AACjB,IAAA,kBAAkB,EAAE,CAAC;AACrB,IAAA,eAAe,EAAE,EAAE;AACnB,IAAA,oBAAoB,EAAE,EAAE;AACxB,IAAA,gBAAgB,EAAE,EAAE;AACpB,IAAA,kBAAkB,EAAE,EAAE;AACtB,IAAA,mBAAmB,EAAE,EAAE;CACf;;;;"}