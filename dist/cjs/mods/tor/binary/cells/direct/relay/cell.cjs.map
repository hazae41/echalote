{"version":3,"file":"cell.cjs","sources":["../../../../../../../../src/mods/tor/binary/cells/direct/relay/cell.ts"],"sourcesContent":["import { lastOf } from \"libs/array.js\";\nimport { Binary } from \"libs/binary.js\";\nimport { NewCell } from \"mods/tor/binary/cells/cell.js\";\nimport { InvalidCircuit, InvalidCommand } from \"mods/tor/binary/cells/errors.js\";\nimport { Circuit } from \"mods/tor/circuit.js\";\nimport { PAYLOAD_LEN } from \"mods/tor/constants.js\";\nimport { TcpStream } from \"mods/tor/streams/tcp.js\";\n\nexport class RelayCell {\n  readonly class = RelayCell\n\n  static command = 3\n\n  constructor(\n    readonly circuit: Circuit,\n    readonly stream: TcpStream | undefined,\n    readonly rcommand: number,\n    readonly data: Buffer\n  ) { }\n\n  async pack() {\n    return (await this.cell()).pack()\n  }\n\n  async cell() {\n    const binary = Binary.allocUnsafe(PAYLOAD_LEN)\n\n    binary.writeUint8(this.rcommand)\n    binary.writeUint16(0)\n    binary.writeUint16(this.stream?.id ?? 0)\n\n    const digestOffset = binary.offset\n\n    binary.writeUint32(0)\n\n    binary.writeUint16(this.data.length)\n    binary.write(this.data)\n    binary.fill(Math.min(binary.remaining, 4))\n\n    if (binary.remaining > 0) {\n      const random = Buffer.allocUnsafe(binary.remaining)\n      binary.write(crypto.getRandomValues(random))\n    }\n\n    const exit = lastOf(this.circuit.targets)\n\n    exit.forwardDigest.update(binary.buffer)\n\n    const digest = Buffer.from(exit.forwardDigest.finalize().buffer).subarray(0, 4)\n\n    binary.offset = digestOffset\n    binary.write(digest)\n\n    for (let i = this.circuit.targets.length - 1; i >= 0; i--)\n      this.circuit.targets[i].forwardKey.apply_keystream(binary.buffer)\n\n    return new NewCell(this.circuit, this.class.command, binary.buffer)\n  }\n\n  static async uncell(cell: NewCell) {\n    if (cell.command !== this.command)\n      throw new InvalidCommand(this.name, cell.command)\n    if (!cell.circuit)\n      throw new InvalidCircuit(this.name, cell.circuit)\n\n    for (let i = 0; i < cell.circuit.targets.length; i++) {\n      const target = cell.circuit.targets[i]\n\n      target.backwardKey.apply_keystream(cell.payload)\n\n      const binary = new Binary(cell.payload)\n\n      const rcommand = binary.readUint8()\n      const recognised = binary.readUint16()\n\n      if (recognised !== 0)\n        continue\n\n      const streamId = binary.readUint16()\n\n      const stream = streamId\n        ? cell.circuit.streams.get(streamId)\n        : undefined\n\n      if (streamId && !stream)\n        throw new Error(`Unknown ${this.name} stream id ${streamId}`)\n\n      const digest = Buffer.from(binary.read(4, true))\n      binary.writeUint32(0)\n\n      target.backwardDigest.update(binary.buffer)\n\n      const digest2 = Buffer.from(target.backwardDigest.finalize().buffer).subarray(0, 4)\n\n      if (!digest.equals(digest2))\n        throw new Error(`Invalid ${this.name} digest`)\n\n      const length = binary.readUint16()\n      const data = binary.read(length)\n\n      return new this(cell.circuit, stream, rcommand, data)\n    }\n\n    throw new Error(`Unrecognised ${this.name}`)\n  }\n}"],"names":["binary","Binary","PAYLOAD_LEN","lastOf","NewCell","InvalidCommand","InvalidCircuit"],"mappings":"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"}