{"version":3,"file":"cell.cjs","sources":["../../../../../../../../src/mods/tor/binary/cells/direct/certs/cell.ts"],"sourcesContent":["import { Ed25519PublicKey, Ed25519Signature } from \"@hazae41/berith\"\nimport { PaddingScheme, RsaPublicKey } from \"@hazae41/paimon\"\nimport { Binary } from \"libs/binary.js\"\nimport { NewCell } from \"mods/tor/binary/cells/cell.js\"\nimport { InvalidCircuit, InvalidCommand } from \"mods/tor/binary/cells/errors.js\"\nimport { Duplicated } from \"mods/tor/binary/certs/errors.js\"\nimport { Cross, Ed25519, RSA } from \"mods/tor/binary/certs/index.js\"\nimport { Unimplemented } from \"mods/tor/errors.js\"\n\nexport interface Certs {\n  id?: RSA.Cert,\n  id_to_tls?: RSA.Cert,\n  id_to_auth?: RSA.Cert,\n  id_to_eid?: Cross.Cert\n  eid_to_signing?: Ed25519.Cert,\n  signing_to_tls?: Ed25519.Cert,\n  signing_to_auth?: Ed25519.Cert,\n}\n\nexport class CertsCell {\n  readonly class = CertsCell\n\n  static command = 129\n\n  constructor(\n    readonly circuit: undefined,\n    readonly certs: Certs\n  ) { }\n\n  pack() {\n    return this.cell().pack()\n  }\n\n  async getIdHash() {\n    if (!this.certs.id)\n      throw new Error(`Undefined ID cert`)\n\n    const key = this.certs.id.cert.publicKey.rawData\n    const hash = await crypto.subtle.digest(\"SHA-1\", key)\n\n    return Buffer.from(hash)\n  }\n\n  async checkId() {\n    if (!this.certs.id)\n      throw new Error(`Undefined ID cert`)\n    this.certs.id.check()\n\n    const algo = this.certs.id.cert.publicKey.algorithm as any\n\n    if (!(\"modulusLength\" in algo))\n      throw new Error(`Undefined modulus length for ID cert`)\n    if (algo.modulusLength !== 1024)\n      throw new Error(`Invalid modulus length for ID cert`)\n\n    const { publicKey, signatureAlgorithm } = this.certs.id.cert\n    const key = await crypto.subtle.importKey(\"spki\", publicKey.rawData, signatureAlgorithm, true, [\"verify\"]);\n    const verified = await crypto.subtle.verify(\"RSASSA-PKCS1-v1_5\", key, this.certs.id.cert.signature, (this.certs.id.cert as any).tbs)\n    if (!verified) throw new Error(`Invalid signature for ID cert`)\n  }\n\n  async checkIdToTls() {\n    if (!this.certs.id)\n      throw new Error(`Undefined ID cert`)\n    if (!this.certs.id_to_tls)\n      throw new Error(`Undefined ID_TO_TLS cert`)\n    this.certs.id_to_tls.check()\n\n    const { publicKey, signatureAlgorithm } = this.certs.id.cert\n    const key = await crypto.subtle.importKey(\"spki\", publicKey.rawData, signatureAlgorithm, true, [\"verify\"]);\n    const verified = await crypto.subtle.verify(\"RSASSA-PKCS1-v1_5\", key, this.certs.id_to_tls.cert.signature, (this.certs.id_to_tls.cert as any).tbs)\n    if (!verified) throw new Error(`Invalid signature for ID_TO_TLS cert`)\n\n    console.warn(\"Could not verify ID_TO_TLS cert key\")\n  }\n\n  async checkIdToEid() {\n    if (!this.certs.id)\n      throw new Error(`Undefined ID cert`)\n    if (!this.certs.id_to_eid)\n      throw new Error(`Undefined ID_TO_EID cert`)\n    this.certs.id_to_eid.check()\n\n    const key = Buffer.from(this.certs.id.cert.publicKey.rawData)\n    const identity = RsaPublicKey.from_public_key_der(key)\n\n    const prefix = Buffer.from(\"Tor TLS RSA/Ed25519 cross-certificate\")\n    const prefixed = Buffer.concat([prefix, this.certs.id_to_eid.payload])\n    const hashed = Buffer.from(await crypto.subtle.digest(\"SHA-256\", prefixed))\n\n    const verified = identity.verify(PaddingScheme.new_pkcs1v15_sign_raw(), hashed, this.certs.id_to_eid.signature)\n    if (!verified) throw new Error(`Invalid signature for ID_TO_EID cert`)\n  }\n\n  checkEidToSigning() {\n    if (!this.certs.id_to_eid)\n      throw new Error(`Undefined ID_TO_EID cert`)\n    if (!this.certs.eid_to_signing)\n      throw new Error(`Undefined EID_TO_SIGNING cert`)\n    this.certs.eid_to_signing.check()\n\n    const identity = new Ed25519PublicKey(this.certs.id_to_eid.key)\n    const signature = new Ed25519Signature(this.certs.eid_to_signing.signature)\n    const verified = identity.verify(this.certs.eid_to_signing.payload, signature)\n    if (!verified) throw new Error(`Invalid signature for EID_TO_SIGNING cert`)\n  }\n\n  checkSigningToTls() {\n    if (!this.certs.eid_to_signing)\n      throw new Error(`Undefined EID_TO_SIGNING cert`)\n    if (!this.certs.signing_to_tls)\n      throw new Error(`Undefined SIGNING_TO_TLS cert`)\n    this.certs.signing_to_tls.check()\n\n    const identity = new Ed25519PublicKey(this.certs.eid_to_signing.certKey)\n    const signature = new Ed25519Signature(this.certs.signing_to_tls.signature)\n    const verified = identity.verify(this.certs.signing_to_tls.payload, signature)\n    if (!verified) throw new Error(`Invalid signature for SIGNING_TO_TLS cert`)\n\n    console.warn(\"Could not verify SIGNING_TO_TLS cert key\")\n  }\n\n  cell(): NewCell {\n    throw new Unimplemented()\n  }\n\n  static uncell(cell: NewCell) {\n    if (cell.command !== this.command)\n      throw new InvalidCommand(this.name, cell.command)\n    if (cell.circuit)\n      throw new InvalidCircuit(this.name, cell.circuit)\n\n    const binary = new Binary(cell.payload)\n\n    const ncerts = binary.readUint8()\n    const certs: Certs = {}\n\n    for (let i = 0; i < ncerts; i++) {\n      const type = binary.readUint8()\n      const length = binary.readUint16()\n\n      if (type === RSA.Cert.types.ID) {\n        if (certs.id) throw new Duplicated(type)\n        certs.id = RSA.Cert.read(binary, type, length)\n        continue\n      }\n\n      if (type === RSA.Cert.types.ID_TO_AUTH) {\n        if (certs.id_to_auth) throw new Duplicated(type)\n        certs.id_to_auth = RSA.Cert.read(binary, type, length)\n        continue\n      }\n\n      if (type === RSA.Cert.types.ID_TO_TLS) {\n        if (certs.id_to_tls) throw new Duplicated(type)\n        certs.id_to_tls = RSA.Cert.read(binary, type, length)\n        continue\n      }\n\n      if (type === Cross.Cert.types.ID_TO_EID) {\n        if (certs.id_to_eid) throw new Duplicated(type)\n        certs.id_to_eid = Cross.Cert.read(binary, type, length)\n        continue\n      }\n\n      if (type === Ed25519.Cert.types.EID_TO_SIGNING) {\n        if (certs.eid_to_signing) throw new Duplicated(type)\n        certs.eid_to_signing = Ed25519.Cert.read(binary, type, length)\n        continue\n      }\n\n      if (type === Ed25519.Cert.types.SIGNING_TO_TLS) {\n        if (certs.signing_to_tls) throw new Duplicated(type)\n        certs.signing_to_tls = Ed25519.Cert.read(binary, type, length)\n        continue\n      }\n\n      if (type === Ed25519.Cert.types.SIGNING_TO_AUTH) {\n        if (certs.signing_to_auth) throw new Duplicated(type)\n        certs.signing_to_auth = Ed25519.Cert.read(binary, type, length)\n        continue\n      }\n\n      throw new Error(`Unknown CERTS cell cert type ${type}`)\n    }\n\n    return new this(cell.circuit, certs)\n  }\n\n}"],"names":["RsaPublicKey","PaddingScheme","Ed25519PublicKey","Ed25519Signature","Unimplemented","InvalidCommand","InvalidCircuit","binary","Binary","RSA.Cert","Duplicated","Cross.Cert","Ed25519.Cert"],"mappings":"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"}