{"version":3,"file":"kdftor.cjs","sources":["../../../../../src/mods/tor/algos/kdftor.ts"],"sourcesContent":["import { Binary } from \"libs/binary.js\"\nimport { HASH_LEN, KEY_LEN } from \"mods/tor/constants.js\"\n\nexport interface KDFResult {\n  keyHash: Buffer,\n  forwardDigest: Buffer,\n  backwardDigest: Buffer,\n  forwardKey: Buffer,\n  backwardKey: Buffer\n}\n\nexport async function kdftor(k0: Buffer): Promise<KDFResult> {\n  const ki = Binary.allocUnsafe(k0.length + 1)\n  ki.write(k0)\n\n  const k = Binary.allocUnsafe(HASH_LEN * 5)\n\n  for (let i = 0; k.remaining > 0; i++) {\n    ki.writeUint8(i, true)\n    const h = await crypto.subtle.digest(\"SHA-1\", ki.buffer)\n    k.write(Buffer.from(h))\n  }\n\n  k.offset = 0\n\n  const keyHash = k.read(HASH_LEN)\n  const forwardDigest = k.read(HASH_LEN)\n  const backwardDigest = k.read(HASH_LEN)\n  const forwardKey = k.read(KEY_LEN)\n  const backwardKey = k.read(KEY_LEN)\n\n  return { keyHash, forwardDigest, backwardDigest, forwardKey, backwardKey }\n}"],"names":["Binary","HASH_LEN","KEY_LEN"],"mappings":";;;;;;AAWM,SAAgB,MAAM,CAAC,EAAU,EAAA;;AACrC,QAAA,MAAM,EAAE,GAAGA,aAAM,CAAC,WAAW,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;AAC5C,QAAA,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;QAEZ,MAAM,CAAC,GAAGA,aAAM,CAAC,WAAW,CAACC,kBAAQ,GAAG,CAAC,CAAC,CAAA;AAE1C,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACpC,YAAA,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;AACtB,YAAA,MAAM,CAAC,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,CAAA;YACxD,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AACxB,SAAA;AAED,QAAA,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA;QAEZ,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,CAACA,kBAAQ,CAAC,CAAA;QAChC,MAAM,aAAa,GAAG,CAAC,CAAC,IAAI,CAACA,kBAAQ,CAAC,CAAA;QACtC,MAAM,cAAc,GAAG,CAAC,CAAC,IAAI,CAACA,kBAAQ,CAAC,CAAA;QACvC,MAAM,UAAU,GAAG,CAAC,CAAC,IAAI,CAACC,iBAAO,CAAC,CAAA;QAClC,MAAM,WAAW,GAAG,CAAC,CAAC,IAAI,CAACA,iBAAO,CAAC,CAAA;QAEnC,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,UAAU,EAAE,WAAW,EAAE,CAAA;KAC3E,CAAA,CAAA;AAAA;;;;"}