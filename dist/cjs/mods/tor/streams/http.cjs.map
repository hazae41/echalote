{"version":3,"file":"http.cjs","sources":["../../../../../src/mods/tor/streams/http.ts"],"sourcesContent":["import { GzDecoder } from \"@hazae41/foras\";\nimport { Binary } from \"libs/binary.js\";\nimport { Future } from \"libs/future.js\";\nimport { Strings } from \"libs/strings.js\";\n\nexport type HttpState =\n  | HttpNoneState\n  | HttpHeadedState\n\nexport interface HttpNoneState {\n  type: \"none\"\n  buffer: Binary\n}\n\nexport interface HttpHeadedState {\n  type: \"headed\",\n  version: string,\n  transfer: HttpTransfer,\n  compression: HttpCompression\n}\n\nexport type HttpTransfer =\n  | HttpChunkedTransfer\n  | HttpLengthedTransfer\n\nexport interface HttpChunkedTransfer {\n  type: \"chunked\",\n  buffer: Binary\n}\n\nexport interface HttpLengthedTransfer {\n  type: \"lengthed\",\n  offset: number,\n  length: number\n}\n\nexport type HttpCompression =\n  | HttpNoneCompression\n  | HttpGzipCompression\n\nexport interface HttpNoneCompression {\n  type: \"none\"\n}\n\nexport interface HttpGzipCompression {\n  type: \"gzip\"\n  decoder: GzDecoder\n}\n\nexport class HttpStream extends EventTarget {\n  readonly res = new Future<Response, unknown>()\n\n  /**\n   * HTTP output bufferer\n   */\n  readonly rstreams = new TransformStream<Buffer, Buffer>()\n\n  /**\n   * HTTP input bufferer\n   */\n  readonly wstreams = new TransformStream<Buffer, Buffer>()\n\n  state: HttpState = { type: \"none\", buffer: Binary.allocUnsafe(10 * 1024) }\n\n  constructor(\n    readonly sstreams: ReadableWritablePair<Buffer, Buffer>,\n    readonly req = new Request(\"/\"),\n    readonly url = new URL(req.url)\n  ) {\n    super()\n\n    if (req.body)\n      req.body.pipeTo(this.wstreams.writable)\n    else\n      this.wstreams.writable.close()\n\n    this.tryRead()\n    this.tryWrite()\n  }\n\n  private async tryWrite() {\n    const reader = this.wstreams.readable.getReader()\n\n    try {\n      await this.write(reader)\n    } catch (e: unknown) {\n      const writer = this.sstreams.writable.getWriter()\n      writer.abort(e)\n      writer.releaseLock()\n\n      this.res.err(e)\n    } finally {\n      reader.releaseLock()\n    }\n  }\n\n  private async write(reader: ReadableStreamReader<Buffer>) {\n    await this.onWriteStart()\n\n    while (true) {\n      const { done, value } = await reader.read()\n\n      if (done) break\n\n      await this.onWrite(value)\n    }\n\n    if (this.req.signal.aborted) return\n\n    await this.onWriteEnd()\n  }\n\n  private async onWriteStart() {\n    let head = `${this.req.method} ${this.url.pathname} HTTP/1.1\\r\\n`\n    head += `Host: ${this.url.host}\\r\\n`\n    head += `Transfer-Encoding: chunked\\r\\n`\n    head += `Accept-Encoding: gzip\\r\\n`\n    this.req.headers.forEach((v, k) => head += `${k}: ${v}\\r\\n`)\n    head += `\\r\\n`\n\n    const writer = this.sstreams.writable.getWriter()\n    writer.write(Buffer.from(head)).catch(console.warn)\n    writer.releaseLock()\n  }\n\n  private async onWrite(chunk: Buffer) {\n    const length = chunk.length.toString(16)\n    const line = `${length}\\r\\n${chunk.toString()}\\r\\n`\n\n    const writer = this.sstreams.writable.getWriter()\n    writer.write(Buffer.from(line)).catch(console.warn)\n    writer.releaseLock()\n  }\n\n  private async onWriteEnd() {\n    const buffer = Buffer.from(`0\\r\\n\\r\\n\\r\\n`)\n\n    const writer = this.sstreams.writable.getWriter()\n    writer.write(buffer).catch(console.warn)\n    writer.close()\n    writer.releaseLock()\n  }\n\n  private async tryRead() {\n    const reader = this.sstreams.readable.getReader()\n\n    try {\n      await this.read(reader)\n    } catch (e: unknown) {\n      const writer = this.rstreams.writable.getWriter()\n      writer.abort(e)\n      writer.releaseLock()\n\n      this.res.err(e)\n    } finally {\n      reader.releaseLock()\n    }\n  }\n\n  private async read(reader: ReadableStreamReader<Buffer>) {\n    while (true) {\n      const { done, value } = await reader.read()\n\n      if (done) break\n\n      await this.onRead(value)\n    }\n  }\n\n  private async onRead(chunk: Buffer) {\n    if (this.state.type === \"none\") {\n      const { buffer } = this.state\n\n      buffer.write(chunk)\n\n      const split = buffer.buffer.indexOf(\"\\r\\n\\r\\n\")\n\n      if (split === -1) return\n\n      const head = buffer.buffer.subarray(0, split)\n      const body = buffer.buffer.subarray(split + \"\\r\\n\\r\\n\".length, buffer.offset)\n\n      const [info, ...rawHeaders] = head.toString().split(\"\\r\\n\")\n      const [version, statusString, statusText] = info.split(\" \")\n\n      const status = Number(statusString)\n      const headers = new Headers(rawHeaders.map(it => Strings.splitOnce(it, \": \")))\n      this.res.ok(new Response(this.rstreams.readable, { headers, status, statusText }))\n\n      const transfer: HttpTransfer = (() => {\n        const type = headers.get(\"transfer-encoding\")\n\n        if (type === \"chunked\") {\n          const buffer = Binary.allocUnsafe(10 * 1024)\n          return { type, buffer }\n        }\n\n        if (type === null) {\n          const length = Number(headers.get(\"content-length\"))\n          return { type: \"lengthed\", offset: 0, length }\n        }\n\n        throw new Error(`Unsupported transfer ${type}`)\n      })()\n\n      const compression: HttpCompression = (() => {\n        const type = headers.get(\"content-encoding\")\n\n        if (type === \"gzip\") {\n          const decoder = new GzDecoder()\n          return { type, decoder }\n        }\n\n        if (type === null) {\n          return { type: \"none\" }\n        }\n\n        throw new Error(`Unsupported compression ${type}`)\n      })()\n\n      this.state = { type: \"headed\", version, transfer, compression }\n\n      chunk = body\n    }\n\n    if (this.state.transfer.type === \"lengthed\") {\n      const { transfer, compression } = this.state\n\n      transfer.offset += chunk.length\n\n      if (transfer.offset > transfer.length)\n        throw new Error(`Length > Content-Length`)\n\n      const writer = this.rstreams.writable.getWriter()\n\n      if (compression.type === \"none\") {\n        writer.write(chunk).catch(console.warn)\n      } else if (compression.type === \"gzip\") {\n        compression.decoder.write(chunk)\n        compression.decoder.flush()\n\n        const dchunk = compression.decoder.read()\n        writer.write(Buffer.from(dchunk.buffer)).catch(console.warn)\n      }\n\n      if (transfer.offset === transfer.length) {\n        if (compression.type === \"gzip\")\n          writer.write(Buffer.from(compression.decoder.finish().buffer)).catch(console.warn)\n\n        writer.close()\n      }\n\n      writer.releaseLock()\n      return\n    }\n\n    if (this.state.transfer.type === \"chunked\") {\n      const { transfer, compression } = this.state\n      const { buffer } = transfer\n\n      buffer.write(chunk)\n\n      let slice = buffer.buffer.subarray(0, buffer.offset)\n\n      while (slice.length) {\n        const index = slice.indexOf(\"\\r\\n\")\n\n        // [...] => partial header => wait\n        if (index === -1) return\n\n        // [length]\\r\\n(...) => full header => split it\n        const length = parseInt(slice.subarray(0, index).toString(), 16)\n        const rest = slice.subarray(index + 2)\n\n        if (length === 0) {\n          const writer = this.rstreams.writable.getWriter()\n\n          if (compression.type === \"gzip\")\n            writer.write(Buffer.from(compression.decoder.finish().buffer)).catch(console.warn)\n\n          writer.close()\n          writer.releaseLock()\n          return\n        }\n\n        // len(...) < length + len(\\r\\n) => partial chunk => wait\n        if (rest.length < length + 2) break\n\n        // ([length]\\r\\n)[chunk]\\r\\n(...) => full chunk => split it\n        const chunk2 = rest.subarray(0, length)\n        const rest2 = rest.subarray(length + 2)\n\n        const writer = this.rstreams.writable.getWriter()\n\n        if (compression.type === \"none\") {\n          writer.write(chunk2).catch(console.warn)\n        } else if (compression.type === \"gzip\") {\n          compression.decoder.write(chunk2)\n          compression.decoder.flush()\n\n          const dchunk2 = compression.decoder.read()\n          writer.write(Buffer.from(dchunk2.buffer)).catch(console.warn)\n        }\n\n        writer.releaseLock()\n\n        buffer.offset = 0\n        buffer.write(rest2)\n\n        slice = buffer.buffer.subarray(0, buffer.offset)\n      }\n\n      return\n    }\n  }\n}"],"names":["Future","Binary","Strings","GzDecoder"],"mappings":"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"}