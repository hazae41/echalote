{"version":3,"file":"http.cjs","sources":["../../../../../src/mods/tor/streams/http.ts"],"sourcesContent":["import { GzDecoder } from \"@hazae41/foras\";\nimport { Binary } from \"libs/binary.js\";\nimport { Future } from \"libs/future.js\";\nimport { Strings } from \"libs/strings.js\";\n\nexport type HttpState =\n  | HttpNoneState\n  | HttpHeadedState\n\nexport interface HttpNoneState {\n  type: \"none\"\n  buffer: Binary\n}\n\nexport interface HttpHeadedState {\n  type: \"headed\",\n  version: string,\n  transfer: HttpTransfer,\n  compression: HttpCompression\n}\n\nexport type HttpTransfer =\n  | HttpChunkedTransfer\n  | HttpLengthedTransfer\n\nexport interface HttpChunkedTransfer {\n  type: \"chunked\",\n  buffer: Binary\n}\n\nexport interface HttpLengthedTransfer {\n  type: \"lengthed\",\n  offset: number,\n  length: number\n}\n\nexport type HttpCompression =\n  | HttpNoneCompression\n  | HttpGzipCompression\n\nexport interface HttpNoneCompression {\n  type: \"none\"\n}\n\nexport interface HttpGzipCompression {\n  type: \"gzip\"\n  decoder: GzDecoder\n}\n\nexport class HttpStream extends EventTarget {\n  readonly res = new Future<Response, unknown>()\n\n  /**\n   * HTTP output bufferer\n   */\n  readonly rstreams = new TransformStream<Buffer, Buffer>()\n\n  /**\n   * HTTP input bufferer\n   */\n  readonly wstreams = new TransformStream<Buffer, Buffer>()\n\n  state: HttpState = { type: \"none\", buffer: Binary.allocUnsafe(10 * 1024) }\n\n  constructor(\n    readonly sstreams: ReadableWritablePair<Buffer, Buffer>,\n    readonly req = new Request(\"/\"),\n    readonly url = new URL(req.url)\n  ) {\n    super()\n\n    if (req.body)\n      req.body.pipeTo(this.wstreams.writable).catch(console.warn)\n    else\n      this.wstreams.writable.close().catch(console.warn)\n\n    this.tryRead().catch(console.warn)\n    this.tryWrite().catch(console.warn)\n  }\n\n  private async tryWrite() {\n    const reader = this.wstreams.readable.getReader()\n\n    try {\n      await this.write(reader)\n    } catch (e: unknown) {\n      console.warn(e)\n\n      const writer = this.sstreams.writable.getWriter()\n      writer.abort(e).catch(console.warn)\n      writer.releaseLock()\n\n      this.res.err(e)\n    } finally {\n      reader.releaseLock()\n    }\n  }\n\n  private async write(reader: ReadableStreamReader<Buffer>) {\n    await this.onWriteStart()\n\n    while (true) {\n      const { done, value } = await reader.read()\n\n      if (done) break\n\n      await this.onWrite(value)\n    }\n\n    if (this.req.signal.aborted) return\n\n    await this.onWriteEnd()\n  }\n\n  private async onWriteStart() {\n    let head = `${this.req.method} ${this.url.pathname} HTTP/1.1\\r\\n`\n    head += `Host: ${this.url.host}\\r\\n`\n    head += `Transfer-Encoding: chunked\\r\\n`\n    head += `Accept-Encoding: gzip\\r\\n`\n    this.req.headers.forEach((v, k) => head += `${k}: ${v}\\r\\n`)\n    head += `\\r\\n`\n\n    const writer = this.sstreams.writable.getWriter()\n    writer.write(Buffer.from(head)).catch(console.warn)\n    writer.releaseLock()\n  }\n\n  private async onWrite(chunk: Buffer) {\n    const length = chunk.length.toString(16)\n    const line = `${length}\\r\\n${chunk.toString()}\\r\\n`\n\n    const writer = this.sstreams.writable.getWriter()\n    writer.write(Buffer.from(line)).catch(console.warn)\n    writer.releaseLock()\n  }\n\n  private async onWriteEnd() {\n    const buffer = Buffer.from(`0\\r\\n\\r\\n\\r\\n`)\n\n    const writer = this.sstreams.writable.getWriter()\n    writer.write(buffer).catch(console.warn)\n    writer.close().catch(console.warn)\n    writer.releaseLock()\n  }\n\n  private async tryRead() {\n    const reader = this.sstreams.readable.getReader()\n\n    try {\n      await this.read(reader)\n    } catch (e: unknown) {\n      console.warn(e)\n\n      const writer = this.rstreams.writable.getWriter()\n      writer.abort(e).catch(console.warn)\n      writer.releaseLock()\n\n      this.res.err(e)\n    } finally {\n      reader.releaseLock()\n    }\n  }\n\n  private async read(reader: ReadableStreamReader<Buffer>) {\n    while (true) {\n      const { done, value } = await reader.read()\n\n      if (done) break\n\n      await this.onRead(value)\n    }\n  }\n\n  private async onRead(chunk: Buffer) {\n    if (this.state.type === \"none\") {\n      const result = await this.onReadNone(chunk)\n      if (!result) return\n      chunk = result\n    }\n\n    if (this.state.type !== \"headed\")\n      return\n\n    if (this.state.transfer.type === \"lengthed\") {\n      await this.onReadLenghted(chunk)\n      return\n    }\n\n    if (this.state.transfer.type === \"chunked\") {\n      await this.onReadChunked(chunk)\n      return\n    }\n  }\n\n  private getTransferFromHeaders(headers: Headers): HttpTransfer {\n    const type = headers.get(\"transfer-encoding\")\n\n    if (type === \"chunked\") {\n      const buffer = Binary.allocUnsafe(10 * 1024)\n      return { type, buffer }\n    }\n\n    if (type === null) {\n      const length = Number(headers.get(\"content-length\"))\n      return { type: \"lengthed\", offset: 0, length }\n    }\n\n    throw new Error(`Unsupported transfer ${type}`)\n  }\n\n  private getCompressionFromHeaders(headers: Headers): HttpCompression {\n    const type = headers.get(\"content-encoding\")\n\n    if (type === \"gzip\") {\n      const decoder = new GzDecoder()\n      return { type, decoder }\n    }\n\n    if (type === null) {\n      return { type: \"none\" }\n    }\n\n    throw new Error(`Unsupported compression ${type}`)\n  }\n\n  private async onReadNone(chunk: Buffer) {\n    if (this.state.type !== \"none\")\n      return\n    const { buffer } = this.state\n\n    buffer.write(chunk)\n\n    const split = buffer.buffer.indexOf(\"\\r\\n\\r\\n\")\n\n    if (split === -1) return\n\n    const head = buffer.buffer.subarray(0, split)\n    const body = buffer.buffer.subarray(split + \"\\r\\n\\r\\n\".length, buffer.offset)\n\n    const [info, ...rawHeaders] = head.toString().split(\"\\r\\n\")\n    const [version, statusString, statusText] = info.split(\" \")\n\n    const status = Number(statusString)\n    const headers = new Headers(rawHeaders.map(it => Strings.splitOnce(it, \": \")))\n    this.res.ok(new Response(this.rstreams.readable, { headers, status, statusText }))\n\n    const transfer = this.getTransferFromHeaders(headers)\n    const compression = this.getCompressionFromHeaders(headers)\n\n    this.state = { type: \"headed\", version, transfer, compression }\n\n    return body\n  }\n\n  private async onReadLenghted(chunk: Buffer) {\n    if (this.state.type !== \"headed\")\n      return\n    if (this.state.transfer.type !== \"lengthed\")\n      return\n    const { transfer, compression } = this.state\n\n    transfer.offset += chunk.length\n\n    if (transfer.offset > transfer.length)\n      throw new Error(`Length > Content-Length`)\n\n    const writer = this.rstreams.writable.getWriter()\n\n    if (compression.type === \"none\") {\n      writer.write(chunk).catch(console.warn)\n    } else if (compression.type === \"gzip\") {\n      compression.decoder.write(chunk)\n      compression.decoder.flush()\n\n      const dchunk = compression.decoder.read()\n      const bdchunk = Buffer.from(dchunk.buffer)\n      writer.write(bdchunk).catch(console.warn)\n    }\n\n    if (transfer.offset === transfer.length) {\n      if (compression.type === \"gzip\") {\n        const fchunk = compression.decoder.finish()\n        const bfchunk = Buffer.from(fchunk.buffer)\n        writer.write(bfchunk).catch(console.warn)\n      }\n\n      writer.close().catch(console.warn)\n    }\n\n    writer.releaseLock()\n  }\n\n  private async onReadChunked(chunk: Buffer) {\n    if (this.state.type !== \"headed\")\n      return\n    if (this.state.transfer.type !== \"chunked\")\n      return\n    const { transfer, compression } = this.state\n    const { buffer } = transfer\n\n    buffer.write(chunk)\n\n    let slice = buffer.buffer.subarray(0, buffer.offset)\n\n    while (slice.length) {\n      const index = slice.indexOf(\"\\r\\n\")\n\n      // [...] => partial header => wait\n      if (index === -1) return\n\n      // [length]\\r\\n(...) => full header => split it\n      const length = parseInt(slice.subarray(0, index).toString(), 16)\n      const rest = slice.subarray(index + 2)\n\n      if (length === 0) {\n        const writer = this.rstreams.writable.getWriter()\n\n        if (compression.type === \"gzip\") {\n          const fchunk = compression.decoder.finish()\n          const bfchunk = Buffer.from(fchunk.buffer)\n          writer.write(bfchunk).catch(console.warn)\n        }\n\n        writer.close().catch(console.warn)\n        writer.releaseLock()\n        return\n      }\n\n      // len(...) < length + len(\\r\\n) => partial chunk => wait\n      if (rest.length < length + 2) break\n\n      // ([length]\\r\\n)[chunk]\\r\\n(...) => full chunk => split it\n      const chunk2 = rest.subarray(0, length)\n      const rest2 = rest.subarray(length + 2)\n\n      const writer = this.rstreams.writable.getWriter()\n\n      if (compression.type === \"none\") {\n        writer.write(chunk2).catch(console.warn)\n      } else if (compression.type === \"gzip\") {\n        compression.decoder.write(chunk2)\n        compression.decoder.flush()\n\n        const dchunk2 = compression.decoder.read()\n        const bdchunk2 = Buffer.from(dchunk2.buffer)\n        writer.write(bdchunk2).catch(console.warn)\n      }\n\n      writer.releaseLock()\n\n      buffer.offset = 0\n      buffer.write(rest2)\n\n      slice = buffer.buffer.subarray(0, buffer.offset)\n    }\n  }\n}"],"names":["Future","Binary","GzDecoder","Strings"],"mappings":"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"}