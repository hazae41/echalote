{"version":3,"file":"http.cjs","sources":["../../../../src/mods/tls/http.ts"],"sourcesContent":["import { fixedCiphersuites } from \"libs/forge.js\";\nimport { Tls } from \"mods/tls/tls.js\";\n\nexport class TlsOverHttp extends Tls {\n  readonly class = TlsOverHttp\n\n  readonly connection\n\n  constructor(\n    readonly info: RequestInfo\n  ) {\n    super()\n\n    setInterval(() => {\n      this.fetch()\n    }, 1000)\n\n    this.connection = window.forge.tls.createConnection({\n      server: false,\n      cipherSuites: Object.values(fixedCiphersuites) as any,\n      verify: (connection, verified, depth, certs) => {\n        return true;\n      },\n      connected: (connection) => {\n        this.dispatchEvent(new Event(\"open\"))\n      },\n      tlsDataReady: async (connection) => {\n        const bytes = connection.tlsData.getBytes();\n        await this.fetch(Buffer.from(bytes, \"binary\"))\n      },\n      dataReady: (connection) => {\n        const bytes = connection.data.getBytes();\n        const data = Buffer.from(bytes, \"binary\")\n\n        const event = new MessageEvent(\"message\", { data })\n        if (!this.dispatchEvent(event)) return\n      },\n      closed: (connection) => {\n        const event = new CloseEvent(\"close\")\n        if (!this.dispatchEvent(event)) return\n\n        this._closed = true\n      },\n      error: (connection, error) => {\n        const event = new ErrorEvent(\"error\", { error })\n        if (!this.dispatchEvent(event)) return\n      }\n    });\n  }\n\n  async fetch(body?: Buffer) {\n    const res = await fetch(this.info, { method: \"POST\", body })\n\n    if (!res.ok) {\n      const error = new Error(await res.text())\n\n      const event = new ErrorEvent(\"error\", { error })\n      if (!this.dispatchEvent(event)) return\n\n      return\n    }\n\n    const buffer = Buffer.from(await res.arrayBuffer())\n    this.connection.process(buffer.toString(\"binary\"))\n  }\n\n}"],"names":["Tls","fixedCiphersuites","__awaiter"],"mappings":"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"}